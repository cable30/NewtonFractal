#include <math.h>
#include <iostream>
#incldue <string>
#include <windows.h>
#include <tchar.h>
#include <strsafe.h>

#include <stb_image_write.h>



//declare the size of your square image
const unsigned long long int pixs = 400;

//header to top of file
const char* outputstart = "P3\n400 400\n255\n";

//define the necessary operations on complex numbers, being held as 2-dim double arrays
void sum(double a[2], double b[2], double out[2])
{
	out[0]=a[0]+b[0];
	out[1]=a[1]+b[1];
}
void subt(double a[2], double b[2], double out[2])
{
	out[0]=a[0]-b[0];
	out[1]=a[1]-b[1];
}
void mult(double a[2], double b[2], double out[2])
{
	out[0]=a[0]*b[0]-a[1]*b[1];
	out[1]=a[0]*b[1]+a[1]*b[0];
}
//conjuate
void conj(double a[2], double out[2])
{
	out[0]=a[0];
	out[1]=-a[1];
}
//divide (a+bi)/(c+di)=(a+bi)(c-di)/(c^2-d^2)
void div(double a[2], double b[2], double out[2])
{
	double con[2];
	double step[2];
	conj(b,con); //conjuate denominator
	mult(a,con,step); //multiply numerator by denominator's conjugate
	double denm=pow(b[0],2)+pow(b[1],2); //find c^2-d^2
	out[0]=step[0]/denm; //real part
	out[1]=step[1]/denm; //imaginary part
}
//multiply complex by real
void scale(double a[2], double b, double out[2])
{
	out[0]=b*a[0];
	out[1]=b*a[1];
}
//find the modulus of complex number (complex analog to absolute value, distance from 0)
void mody(double a[2], double out)
{
	out=sqrt(pow(a[0],2)+pow(a[1],2));
}

//hard code in the polynomial function x^6-1
void poly(double a[2], double out[2])
{
	double mid[2];
	mult(a,a,mid); //x^2
	mult(mid, mid, out); //x^4
	mult(mid, out, out); x^6
	out[0]=out[0]-1;
}

//hard code in the derivative 6x^5
void polyd(double a[2], double out[2])
{
	mult(a,a,out); //x^2
	mult(out, out, out); //x^4
	mult(out, a, out); //x^5
	scale(out, 6, out);
}

//hard code the roots
double polyroots[6][2]= {{-1,0},{1,0},{-.5,.866025},{.5,.866025}, {-.5,-.866025}, {.5,-.866025}};

//hard code color rgb values
	char** cherry_pink = new char* [3];
	cherry_pink[0] = new char[4];
	cherry_pink[1] = new char[4];
	cherry_pink[2] = new char[4];
	strcpy(cherry_pink[0], "255");
	strcpy(cherry_pink[1], "204");
	strcpy(cherry_pink[2], "229");

	char** easter_blue = new char* [3];
	easter_blue[0] = new char[4];
	easter_blue[1] = new char[4];
	easter_blue[2] = new char[4];
	strcpy(easter_blue[0], "204");
	strcpy(easter_blue[1], "204");
	strcpy(easter_blue[2], "255");


	char** cyan = new char* [3];
	cyan[0] = new char[4];
	cyan[1] = new char[4];
	cyan[2] = new char[4];
	strcpy(cyan[0], "204");
	strcpy(cyan[1], "255");
	strcpy(cyan[2], "255");

	char** cherry_green = new char* [3];
	cherry_green[0] = new char[4];
	cherry_green[1] = new char[4];
	cherry_green[2] = new char[4];
	strcpy(cherry_green[0], "204");
	strcpy(cherry_green[1], "255");
	strcpy(cherry_green[2], "204");

	char** light_yellow = new char* [3];
	light_yellow[0] = new char[4];
	light_yellow[1] = new char[4];
	light_yellow[2] = new char[4];
	strcpy(light_yellow[0], "255");
	strcpy(light_yellow[1], "255");
	strcpy(light_yellow[2], "204");

	char** pink = new char* [3];
	pink[0] = new char[4];
	pink[1] = new char[4];
	pink[2] = new char[4];
	strcpy(pink[0], "255");
	strcpy(pink[1], "153");
	strcpy(pink[2], "204");

	char** blurple = new char* [3];
	blurple[0] = new char[4];
	blurple[1] = new char[4];
	blurple[2] = new char[4];
	strcpy(blurple[0], "153");
	strcpy(blurple[1], "153");
	strcpy(blurple[2], "255");

	char** easter_green = new char* [3];
	easter_green[0] = new char[4];
	easter_green[1] = new char[4];
	easter_green[2] = new char[4];
	strcpy(easter_green[0], "204");
	strcpy(easter_green[1], "255");
	strcpy(easter_green[2], "153");

	char** light_red = new char* [3];
	light_red[0] = new char[4];
	light_red[1] = new char[4];
	light_red[2] = new char[4];
	strcpy(light_red[0], "255");
	strcpy(light_red[1], "102");
	strcpy(light_red[2], "102");

	char** yellow = new char* [3];
	yellow[0] = new char[4];
	yellow[1] = new char[4];
	yellow[2] = new char[4];
	strcpy(yellow[0], "255");
	strcpy(yellow[1], "255");
	strcpy(yellow[2], "102");

	char** blue = new char* [3];
	blue[0] = new char[4];
	blue[1] = new char[4];
	blue[2] = new char[4];
	strcpy(blue[0], "051");
	strcpy(blue[1], "051");
	strcpy(blue[2], "255");

	char** green = new char* [3];
	green[0] = new char[4];
	green[1] = new char[4];
	green[2] = new char[4];
	strcpy(green[0], "051");
	strcpy(green[1], "255");
	strcpy(green[2], "051");

	char** orange = new char* [3];
	orange[0] = new char[4];
	orange[1] = new char[4];
	orange[2] = new char[4];
	strcpy(orange[0], "255");
	strcpy(orange[1], "188");
	strcpy(orange[2], "051");

	char** magenta = new char* [3];
	magenta[0] = new char[4];
	magenta[1] = new char[4];
	magenta[2] = new char[4];
	strcpy(magenta[0], "255");
	strcpy(magenta[1], "000");
	strcpy(magenta[2], "102");

	char** turquose = new char* [3];
	turquose[0] = new char[4];
	turquose[1] = new char[4];
	turquose[2] = new char[4];
	strcpy(turquose[0], "000");
	strcpy(turquose[1], "204");
	strcpy(turquose[2], "102");

	char** brat_green = new char* [3];
	brat_green[0] = new char[4];
	brat_green[1] = new char[4];
	brat_green[2] = new char[4];
	strcpy(brat_green[0], "102");
	strcpy(brat_green[1], "204");
	strcpy(brat_green[2], "000");

	char** deep_blue = new char* [3];
	deep_blue[0] = new char[4];
	deep_blue[1] = new char[4];
	deep_blue[2] = new char[4];
	strcpy(deep_blue[0], "074");
	strcpy(deep_blue[1], "112");
	strcpy(deep_blue[2], "150");

//choose what colors you want
	char*** colors = new char**[4];
	colors[0 ]= cherry_pink;
	colors[1] = cherry_green;
	colors[2] = easter_blue;
	colors[3] = cyan;
	colors[4] = light_yellow;
	colors[5] = light_red;
	colors[6] = deep_blue;
	 



void fractalLine(int linen, int *picks)
	int len=6;
	double center =0;
	double length =4;
	double w = abs(center-length);
	double bts = w/pixs;
	double c[2]={0,0};
	double lowend[2];
	lowend[0] = center-length/2;
	lowend[1] = center-length/2;

	double temp[2];
	double temp2[2];
	double temp3[2];
	
	double mtemp[1]={0};
	double modu[1];
	
	bool flag=0;
	
	for(int i=0; i<pixs; i++)
	{
		c[0] = lowend[0] + (bts/2) + (bts*i);
		c[1] = lowend[1] + (bts/2) + (bts*linen);
		mody(c, modu);
		for(ii=0;ii<its;ii++)
		{
			poly(c, temp);
			polyd(c, temp2);
			div(temp, temp2, temp3);
			subt(c, temp3, b);
			c[0]=b[0];
			c[1]=b[1];
		}
		for(ii=0; ii<len; ii++)
		{
			subt(c, roots[ii],temp);
			mody(temp, mtemp);
			if (mtemp[0]<=.00001)
			{
				picks[linen*pixs + i]=ii;
				flag = true;
				break;
			}
		}
	if(!flag)
		picks[linen*pixs+(i)]=-1;
	flag=false;
	}
}

int main()
{
	FILE* we=fopen("text.ppm","w");
	fprintf(we,outputstart);
	const int width=pixs;
	int* picks = new int[width*width];
	
		for(line=0; line<pixs; line++)
	{
		fractalLine(i, picks);
	}
	
	char* no = new char[pixs*(12-3)];
	unsigned long long int well =0;
	unsigned long long int wrote =0;
	
	for(unsigned long long int e=0; e<pixs; e++)
	{
		for(unsigned long long int ee=0; ee<pixs; ee+)
		{
			well=picks[e*pixs+ee];
			for(int eee=0; eee<12;eee+)
			{
				no[wrote] = colors[(well * 12) + eee];
				wrote++;
			}
		no[wrote]='\n';
		fprintf(we,no);
		wrote=0;
	}
	fclose(we);
	
	const int width = pixs;
	const int height = pixs;
	const int channels = 3; // RGB

    // Create an image buffer
    unsigned char* image = new unsigned char[width * height * channels];

    // Fill the image buffer with color (e.g., a gradient or solid color)
    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            int index = (y * width + x) * channels;
            image[index + 0] = ; // Red
            image[index + 1] = ; // Green
            image[index + 2] = ; // Blue
        }
    }

    // Write the image to a file
    stbi_write_png("output.png", width, height, channels, image, width * channels);


	
	return 0;
}
